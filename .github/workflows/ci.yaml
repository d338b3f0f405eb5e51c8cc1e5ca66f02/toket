name: Run Tests

on:
  workflow_dispatch: # Manual trigger for the workflow

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: 'hackerschoice/gsocket'

      # Step 2: Modify files and directories
      - name: 🔄 Modify Source Files
        shell: bash
        run: |
          sudo apt install -y rsync
          rm -rf .git && while read -r part; do
          # Adjust paths and update file contents as per rules
          mod=$(echo "$part" | sed -E \
          -e 's/^\./\/tmp\/source/g' \
          -e 's/netcat/memew/g' \
          -e 's/gsocket/toket/g')

          if [[ -d $part ]]; then
            # Create directory in target path
            mkdir -p "$(dirname "$mod")"
            echo "📁 Created directory: $mod"
          elif [[ -f $part ]]; then
            # Process file and copy with modification
            mkdir -p "$(dirname "$mod")"
            sed -E \
            -e 's/netcat/memew/g' \
            -e 's/NETCAT/MEMEW/g' \
            -e 's/GSOCKET/TOKET/g' \
            -e 's/gsocket/toket/g' \
            "$part" > "$mod"
            echo "✅ Processed file: $part ➡️ $mod"
          fi
          done < <(find .)

          # Synchronize modified files and reset permissions
          rsync -pav --exclude '.git' /tmp/source/ . --delete
          chmod +x ./bootstrap
          find . -iname "*.sh" -exec chmod +x {} \;

          echo "🎉 All operations have been completed successfully!"

      # Step 3: Install dependencies
      - name: 📦 Install Dependencies
        run: |
          for TOOL in automake autoconf socat sshd sshfs; do
            if ! command -v $TOOL >/dev/null; then
              echo "🔍 Installing missing dependency: $TOOL"
              sudo apt update
              sudo apt install -y $TOOL
            else
              echo "✅ Dependency already installed: $TOOL"
            fi
          done

      # Step 4: Bootstrap and configure the project
      - name: 🚀 Bootstrap and Configure
        env:
          CFLAGS: "-fdiagnostics-color=always"
        run: |
          ./bootstrap
          ./configure --enable-tests

      # Step 5: Build the project
      - name: 🔨 Build Project
        run: make -j$(nproc)

      # Step 6: Run tests
      - name: ✅ Run Tests
        working-directory: tests
        run: |
          ./run_all_tests.sh || (cat *.log; exit 1)