name: Run Tests

on:
  workflow_dispatch: # Manual trigger for the workflow

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: 'hackerschoice/gsocket'

      # Step 2: Modify files and directories
      - name: 🔄 Modify Source Files
        shell: sh
        run: |
          sudo apt install -y rsync
          # Remove `.git` directory if it exists
            rm -rf .git
          
            # Loop through each file/directory found in the current directory
            find . | while IFS= read -r part; do
            # Adjust paths and update contents based on specific rules
            mod=$(echo "$part" | sed -E \
            -e 's/^\./\/tmp\/source/g' \
            -e 's/netcat/memew/g' \
            -e 's/gsocket/toket/g')
          
            # If it's a directory, create the corresponding directory in the modified path
            if [ -d "$part" ]; then
            mkdir -p "$(dirname "$mod")"
          echo "📁 Created directory: $mod"
          
          # If it's a file, process the file and copy to the modified path
            elif [ -f "$part" ]; then
            mkdir -p "$(dirname "$mod")"
            sed -E \
            -e 's/netcat/memew/g' \
            -e 's/NETCAT/MEMEW/g' \
            -e 's/GSOCKET/TOKET/g' \
            -e 's/gsocket/toket/g' \
            "$part" > "$mod"
          echo "✅ Processed file: $part ➡️ $mod"
            fi
            done
          
            # Synchronize modified files back to project directory and reset permissions
            rsync -pav --exclude '.git' /tmp/source/ . --delete
            echo "🔄 Synchronized changes to the current directory"
          
            # Set executable permissions for the bootstrap script if it exists
            if [ -f ./bootstrap ]; then
            chmod +x ./bootstrap
            echo "✅ Set executable permissions on ./bootstrap"
            fi
          
            # Set executable permissions for all shell scripts in the current directory
            find . -iname "*.sh" -exec chmod +x {} \;
            echo "✅ Updated permissions for all shell scripts"
          
            # Final success message
            echo "🎉 All operations have been completed successfully!"

      # Step 3: Install dependencies
      - name: 📦 Install Dependencies
        run: |
          for TOOL in automake autoconf socat sshd sshfs; do
            if ! command -v $TOOL >/dev/null; then
              echo "🔍 Installing missing dependency: $TOOL"
              sudo apt update
              sudo apt install -y $TOOL
            else
              echo "✅ Dependency already installed: $TOOL"
            fi
          done

      # Step 4: Bootstrap and configure the project
      - name: 🚀 Bootstrap and Configure
        env:
          CFLAGS: "-fdiagnostics-color=always"
        run: |
          ./bootstrap
          ./configure --enable-tests

      # Step 5: Build the project
      - name: 🔨 Build Project
        run: make -j$(nproc)

      # Step 6: Run tests
      - name: ✅ Run Tests
        working-directory: tests
        run: |
          ./run_all_tests.sh || (cat *.log; exit 1)