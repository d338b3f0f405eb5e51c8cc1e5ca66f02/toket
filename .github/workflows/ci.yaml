name: Run Tests
  #on:
  #  push:
  #  branches:
  #  - master
  #pull_request:
on:
  workflow_dispatch:



jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: 'hackerschoice/gsocket'
    - name: modify
      run: |
        sudo apt install -y rsync
        rm -rf .git && while read -r part; do
        # Modify the path and file contents based on the specified rules
        mod=$(echo "$part" | sed -E \
        -e 's/^\./\/tmp\/source/g' \
        -e 's/netcat/memew/g' \
        -e 's/gsocket/toket/g')
    
        # Check if the current item is a directory
        if [[ -d $part ]]; then
        # Create the corresponding directory in the target path
        mkdir -p "$(dirname "$mod")"
        # Log directory creation
        echo "üìÅ Created directory: $mod"
    
        # Check if the current item is a file
        elif [[ -f $part ]]; then
        # Create the directory for the target file if necessary
        mkdir -p "$(dirname "$mod")"
        # Process and copy the file with modified content
        sed -E \
        -e 's/netcat/memew/g' \
        -e 's/NETCAT/MEMEW/g' \
        -e 's/GSOCKET/TOKET/g' \
        -e 's/gsocket/toket/g' \
        "$part" > "$mod"
        # Log file processing
        echo "‚úÖ Processed file: $part ‚û°Ô∏è $mod"
        fi
        done < <(find .)
        # Final log showing completion
        rsync -pav --exclude '.git'  /tmp/source/ . --delete
        find  . -iname "*.sh"  -exec chmod +x {} \;
        echo "üéâ All operations have been completed successfully!"

    - name: Install dependencies
      run: |
        for TOOL in automake autoconf socat sshd sshfs; do
          if ! command -v $TOOL >/dev/null; then
            sudo apt update
            sudo apt install -y \
              automake autoconf openssh-server socat sshfs
          fi
        done
    - name: Bootstrap
      env:
        CFLAGS: "-fdiagnostics-color=always"
      run: |
        ./bootstrap
        ./configure --enable-tests
    - name: Build
      run: make -j$(nproc)
    - name: Test
      working-directory: tests
      run: ./run_all_tests.sh || (cat *.log; exit 1)
